#include <Eigen/Dense>
#include <vector>
#include <iostream>
#include "matplotlibcpp.h"

class PCA
{
    public:
        PCA(){};
        ~PCA(){};

        Eigen::MatrixXd PolarToCartesian(Eigen::VectorXd laserScanData)
        {
            Eigen::MatrixXd cartesianLaserScanData(360,2);
            //int theta = 1;

            for (int theta = 0; theta < 360; theta++)
            {
                double currentRange = laserScanData[theta];
                double thetaRadians = theta * M_PI / 180.0;
                double x = currentRange * cos(thetaRadians);
                double y = currentRange * sin(thetaRadians);
                cartesianLaserScanData(theta,0) = x;
                cartesianLaserScanData(theta,1) = y; 
            }

            //std::cout << "Cartesian laser scan: " << cartesianLaserScanData << std::endl;
            return cartesianLaserScanData;
            
        };

        void FilterLaserscan(Eigen::MatrixXd laserScanData, int filterTolerance)
        {
            int rangeSize = 2 * filterTolerance + 1; // Calculate the actual size of the range
            Eigen::MatrixXd tempLeft(rangeSize, 2);  // Initialize tempLeft with the correct size

            int leftCounter = 0;  // Counter for indexing tempLeft
            for (int theta = 90 - filterTolerance; theta <= 90 + filterTolerance; theta++, leftCounter++)
            {
                if (theta >= 0 && theta < laserScanData.rows()) // Check bounds of laserScanData
                {
                    tempLeft(leftCounter, 0) = laserScanData(theta, 0);
                    tempLeft(leftCounter, 1) = laserScanData(theta, 1);
                }
            }

            this->filteredLaserScanLeftSide = tempLeft;

            //int rangeSize = 2 * filterTolerance + 1; // Calculate the actual size of the range
            Eigen::MatrixXd tempRight(rangeSize, 2);  // Initialize tempLeft with the correct size

            int rightCounter = 0;  // Counter for indexing tempLeft
            for (int theta = 270 - filterTolerance; theta <= 270 + filterTolerance; theta++, rightCounter++)
            {
                if (theta >= 0 && theta < laserScanData.rows()) // Check bounds of laserScanData
                {
                    tempRight(rightCounter, 0) = laserScanData(theta, 0);
                    tempRight(rightCounter, 1) = laserScanData(theta, 1);
                }
            }

            this->filteredLaserScanRightSide = tempRight;
        };

        Eigen::VectorXd computePCA(const Eigen::MatrixXd &data)
        {
            // Centering the data

            //std::cout << "Data: " << data << std::endl;

            Eigen::VectorXd mean = data.colwise().mean();

            //std::cout << "Mean: " << mean << std::endl;

            Eigen::MatrixXd centered = data.rowwise() - mean.transpose();

            //std::cout << "Centered: " << centered << std::endl;

            // Computing the covariance matrix
            Eigen::MatrixXd cov = centered.adjoint() * centered;

            //std::cout << "Covariance: " << cov << std::endl;

            // Performing eigen decomposition
            Eigen::SelfAdjointEigenSolver<Eigen::MatrixXd> eigen_solver(cov);

            //std::cout << "Eigenvalues: " << eigen_solver.eigenvalues() << std::endl;


            Eigen::MatrixXd eigenvectors = eigen_solver.eigenvectors();

            //std::cout << "Eigenvectors: " << eigenvectors << std::endl;

            // Extracting the principal component
            Eigen::VectorXd principal_component = eigenvectors.rightCols(1);

            return principal_component;
        };

        void plotData(Eigen::MatrixXd laserScanData, Eigen::VectorXd PCA_vector)
        {
            std::vector<double> x_data(laserScanData.rows()), y_data(laserScanData.rows());
            for (int i = 0; i < laserScanData.rows(); ++i) {
                x_data[i] = laserScanData(i, 0);
                y_data[i] = laserScanData(i, 1);
            }

            // Plotting the laser scan data
            matplotlibcpp::scatter(x_data, y_data);

            // Calculate end points for the PCA vector for visualization
            double scale_factor = 10.0;  // Adjust this factor to scale the PCA vector for better visualization
            std::vector<double> pca_x = {0, scale_factor * PCA_vector(0)};
            std::vector<double> pca_y = {0, scale_factor * PCA_vector(1)};

            // Explicitly defining the start points for the quiver plot
            std::vector<double> start_x = {0,0};
            std::vector<double> start_y = {0,0};

            // Plotting the PCA vector
            matplotlibcpp::quiver(start_x, start_y, pca_x, pca_y);

            // Show the plot
            matplotlibcpp::show();
        };

        void CalculateAndPlotPCA(std::vector<double> rawLaserScan)
        {
            //Map std::vector to eigen::vector
            Eigen::VectorXd laser = Eigen::VectorXd::Map(&rawLaserScan[0], rawLaserScan.size());

            //convert polar coordinates to cartesian coordinates
            Eigen::MatrixXd data = this->PolarToCartesian(laser);

            //Compute PCA
            Eigen::VectorXd principal_component = this->computePCA(data);
            std::cout << "Principal Component of all: \n" << principal_component << std::endl;
            //pca.plotData(data, principal_component); 

            //Filter Right and Left side and calculate PCA seperately
            this->FilterLaserscan(data, 30);
            Eigen::MatrixXd left = this->getFilteredLeftScanData();
            Eigen::MatrixXd right = this->getFilteredRightScanData();

            Eigen::VectorXd principal_componentLeft = this->computePCA(left);
            this->PCA_Left = principal_componentLeft;
            std::cout << "Principal Component Left: \n" << principal_componentLeft << std::endl;
            //pca.plotData(data, principal_componentLeft);  

            Eigen::VectorXd principal_componentRight = this->computePCA(right);
            this->PCA_Right = principal_componentRight;
            std::cout << "Principal Component Right: \n" << principal_componentRight << std::endl;
            this->plotData(data, principal_componentRight);
        }

        Eigen::VectorXd getAngleDifference()
        {
            Eigen::VectorXd Thetas(2);

            Eigen::VectorXd directionVector(2);
            directionVector(0) = 1;
            directionVector(1) = 0;

            double dotProduct = (directionVector.dot(this->PCA_Left));

            double magnitudeVec1 = directionVector.norm();
            double magnitudeVec2 = this->PCA_Left.norm();

            // Calculate the cosine of the angle
            double cosAngle = dotProduct / (magnitudeVec1 * magnitudeVec2);

            // Ensure the cosine value is within [-1, 1] to avoid NaN due to floating point errors
            cosAngle = std::max(-1.0, std::min(1.0, cosAngle));

            // Calculate the angle in radians
            double angle = std::acos(cosAngle);

            std::cout << "Angles: " << Thetas << std::endl;

            return Thetas;
        }

        Eigen::MatrixXd getFilteredLeftScanData()
        {
            return this->filteredLaserScanLeftSide;
        };

        Eigen::MatrixXd getFilteredRightScanData()
        {
            return this->filteredLaserScanRightSide;
        };

        Eigen::VectorXd getPCA_Left()
        {
            return this->PCA_Left;
        };

        Eigen::VectorXd getPCA_Right()
        {
            return this->PCA_Right;
        };

    private:
        Eigen::MatrixXd filteredLaserScanLeftSide;
        Eigen::MatrixXd filteredLaserScanRightSide;
        Eigen::VectorXd PCA_Left;
        Eigen::VectorXd PCA_Right;
};

int main() 
{

    //Eigen::VectorXd laserScanRange = {1.0429999828338623, 1.0720000267028809, 1.0520000457763672, 1.0700000524520874, 1.0369999408721924, 1.0640000104904175, 1.0670000314712524, 1.0679999589920044, 1.0579999685287476, 1.0679999589920044, 1.0740000009536743, 1.0850000381469727, 1.0579999685287476, 1.090000033378601, 1.0920000076293945, 1.1089999675750732, 1.1039999723434448, 1.1080000400543213, 1.125, 1.13100004196167, 1.1339999437332153, 1.1549999713897705, 1.1410000324249268, 1.1660000085830688, 1.1790000200271606, 1.1950000524520874, 1.2020000219345093, 1.2079999446868896, 1.2380000352859497, 1.253999948501587, 1.2599999904632568, 1.2690000534057617, 1.2899999618530273, 1.3250000476837158, 1.3289999961853027, 1.340000033378601, 1.3769999742507935, 1.3849999904632568, 1.4170000553131104, 1.4320000410079956, 1.4630000591278076, 1.4889999628067017, 1.4700000286102295, 1.4359999895095825, 1.4010000228881836, 1.402999997138977, 1.371000051498413, 1.3569999933242798, 1.3509999513626099, 1.3329999446868896, 1.284000039100647, 1.277999997138977, 1.2519999742507935, 1.24399995803833, 1.2430000305175781, 1.215999960899353, 1.2070000171661377, 1.1859999895095825, 1.1699999570846558, 1.1610000133514404, 1.1690000295639038, 1.1299999952316284, 1.1330000162124634, 1.1339999437332153, 1.1119999885559082, 1.1130000352859497, 1.0959999561309814, 1.0740000009536743, 1.0839999914169312, 1.0770000219345093, 1.0720000267028809, 1.069000005722046, 1.0440000295639038, 1.0700000524520874, 1.0700000524520874, 1.0609999895095825, 1.0509999990463257, 1.0609999895095825, 1.0429999828338623, 1.0410000085830688, 1.0199999809265137, 1.0440000295639038, 1.0509999990463257, 1.0820000171661377, 1.1679999828338623, 1.156000018119812, 1.1460000276565552, 1.152999997138977, 1.1510000228881836, 1.156000018119812, 1.1540000438690186, 1.1670000553131104, 1.1690000295639038, 1.1679999828338623, 1.1660000085830688, 1.1749999523162842, 1.1759999990463257, 1.1759999990463257, 1.187000036239624, 1.187999963760376, 1.194000005722046, 1.190000057220459, 1.2000000476837158, 1.2020000219345093, 1.2289999723434448, 1.2350000143051147, 1.2319999933242798, 1.2319999933242798, 1.2480000257492065, 1.2710000276565552, 1.2669999599456787, 1.2910000085830688, 1.2990000247955322, 1.2990000247955322, 1.3220000267028809, 1.3229999542236328, 1.3329999446868896, 1.347000002861023, 1.3630000352859497, 1.3830000162124634, 1.406000018119812, 1.4199999570846558, 1.4329999685287476, 1.4479999542236328, 1.465999960899353, 1.4759999513626099, 1.5260000228881836, 1.5440000295639038, 1.562999963760376, 1.5959999561309814, 1.6119999885559082, 1.6330000162124634, 1.6749999523162842, 1.690000057220459, 1.715999960899353, 1.7690000534057617, 1.7799999713897705, 1.8259999752044678, 1.8760000467300415, 1.9199999570846558, 1.9850000143051147, 2.0299999713897705, 2.066999912261963, 2.134000062942505, 2.1640000343322754, 2.25, 2.2720000743865967, 2.371999979019165, 2.428999900817871, 2.5199999809265137, 2.61899995803833, 2.7160000801086426, 2.890000104904175, 2.9619998931884766, 3.0980000495910645, 3.2079999446868896, 3.3269999027252197, 3.437999963760376, 3.671999931335449, 3.9189999103546143, 3.7690000534057617, 0.20100000500679016, 0.21400000154972076, 0.21299999952316284, 0.21299999952316284, 0.21199999749660492, 0.210999995470047, 0.20999999344348907, 0.20999999344348907, 0.20999999344348907, 0.20999999344348907, 0.210999995470047, 0.21199999749660492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8489999771118164, 0.6959999799728394, 0.6959999799728394, 0.8029999732971191, 0.753000020980835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4850000143051147, 0.0, 0.0, 1.7269999980926514, 0.0, 2.566999912261963, 2.194999933242798, 2.1540000438690186, 2.8959999084472656, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.947000026702881, 3.937000036239624, 3.8489999771118164, 3.9760000705718994, 3.928999900817871, 3.992000102996826, 3.9809999465942383, 3.8570001125335693, 0.0, 3.9619998931884766, 4.045000076293945, 4.046999931335449, 4.120999813079834, 4.080999851226807, 3.1710000038146973, 3.578000068664551, 3.4159998893737793, 3.325000047683716, 3.2119998931884766, 3.0840001106262207, 2.619999885559082, 2.2190001010894775, 2.1610000133514404, 2.1029999256134033, 2.0339999198913574, 2.000999927520752, 1.9529999494552612, 0.0, 1.8259999752044678, 1.7630000114440918, 1.7269999980926514, 1.7120000123977661, 1.6449999809265137, 1.6139999628067017, 1.6019999980926514, 1.5670000314712524, 1.534000039100647, 1.5119999647140503, 1.4700000286102295, 1.437000036239624, 1.4290000200271606, 1.3980000019073486, 1.3860000371932983, 1.3530000448226929, 1.3370000123977661, 1.2339999675750732, 0.0, 1.2910000085830688, 1.2690000534057617, 1.2669999599456787, 1.2519999742507935, 1.225000023841858, 1.2059999704360962, 1.1950000524520874, 1.194000005722046, 1.1890000104904175, 1.1699999570846558, 1.1380000114440918, 1.1390000581741333, 1.1260000467300415, 1.128999948501587, 1.1160000562667847, 1.1059999465942383, 1.1100000143051147, 1.1069999933242798, 1.1089999675750732, 1.0670000314712524, 1.0800000429153442, 1.1019999980926514, 1.0829999446868896, 1.065999984741211, 1.0700000524520874, 1.059999942779541, 1.0839999914169312, 1.0820000171661377, 1.0360000133514404, 1.0369999408721924, 1.034999966621399, 1.0460000038146973, 1.0399999618530273, 1.0230000019073486, 1.0579999685287476, 1.0570000410079956, 1.0529999732971191, 1.0260000228881836};
    std::vector<double> laserScanRange = {0.14100000262260437, 0.14100000262260437, 0.1420000046491623, 0.1420000046491623, 0.14300000667572021, 0.14399999380111694, 0.14499999582767487, 0.1459999978542328, 0.1469999998807907, 0.14800000190734863, 0.14900000393390656, 0.15000000596046448, 0.1509999930858612, 0.15199999511241913, 0.15299999713897705, 0.15399999916553497, 0.1550000011920929, 0.15700000524520874, 0.15800000727176666, 0.1599999964237213, 0.16200000047683716, 0.164000004529953, 0.16699999570846558, 0.17000000178813934, 0.17299999296665192, 0.17599999904632568, 0.18299999833106995, 0.18700000643730164, 0.19099999964237213, 0.1979999989271164, 0.2029999941587448, 0.21199999749660492, 0.2160000056028366, 0.21699999272823334, 0.20800000429153442, 0.20399999618530273, 0.20000000298023224, 0.19599999487400055, 0.19200000166893005, 0.1889999955892563, 0.18700000643730164, 0.18400000035762787, 0.1809999942779541, 0.17800000309944153, 0.17499999701976776, 0.17299999296665192, 0.17100000381469727, 0.16899999976158142, 0.16699999570846558, 0.16500000655651093, 0.164000004529953, 0.16200000047683716, 0.1599999964237213, 0.1589999943971634, 0.15700000524520874, 0.15600000321865082, 0.1550000011920929, 0.15399999916553497, 0.15299999713897705, 0.15199999511241913, 0.1509999930858612, 0.15000000596046448, 0.14900000393390656, 0.14800000190734863, 0.1469999998807907, 0.1459999978542328, 0.1459999978542328, 0.14499999582767487, 0.14499999582767487, 0.14399999380111694, 0.14300000667572021, 0.14300000667572021, 0.14300000667572021, 0.1420000046491623, 0.1420000046491623, 0.1420000046491623, 0.1420000046491623, 0.1420000046491623, 0.1420000046491623, 0.1420000046491623, 0.1420000046491623, 0.14300000667572021, 0.14300000667572021, 0.14300000667572021, 0.14300000667572021, 0.14300000667572021, 0.14399999380111694, 0.14399999380111694, 0.14399999380111694, 0.14499999582767487, 0.14499999582767487, 0.1459999978542328, 0.1459999978542328, 0.1469999998807907, 0.1469999998807907, 0.14800000190734863, 0.14900000393390656, 0.15000000596046448, 0.1509999930858612, 0.15199999511241913, 0.15299999713897705, 0.15399999916553497, 0.1550000011920929, 0.15700000524520874, 0.15800000727176666, 0.1589999943971634, 0.1599999964237213, 0.16200000047683716, 0.164000004529953, 0.16300000250339508, 0.16699999570846558, 0.16899999976158142, 0.17100000381469727, 0.17299999296665192, 0.17499999701976776, 0.1770000010728836, 0.17900000512599945, 0.1809999942779541, 0.18299999833106995, 0.1850000023841858, 0.1860000044107437, 0.1850000023841858, 0.18199999630451202, 0.17399999499320984, 0.17100000381469727, 0.1679999977350235, 0.16500000655651093, 0.16200000047683716, 0.1589999943971634, 0.15600000321865082, 0.15399999916553497, 0.1509999930858612, 0.14900000393390656, 0.1469999998807907, 0.14499999582767487, 0.14300000667572021, 0.14100000262260437, 0.14000000059604645, 0.1379999965429306, 0.13600000739097595, 0.13500000536441803, 0.13300000131130219, 0.13199999928474426, 0.13099999725818634, 0.12999999523162842, 0.1289999932050705, 0.12800000607967377, 0.12700000405311584, 0.12600000202655792, 0.12600000202655792, 0.125, 0.12399999797344208, 0.12300000339746475, 0.12200000137090683, 0.12200000137090683, 0.12099999934434891, 0.12099999934434891, 0.11999999731779099, 0.11999999731779099, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11900000274181366, 0.11999999731779099, 0.11999999731779099, 0.12099999934434891, 0.12099999934434891, 0.12099999934434891, 0.12200000137090683, 0.12200000137090683, 0.12300000339746475, 0.12300000339746475, 0.12399999797344208, 0.125, 0.125, 0.12600000202655792, 0.12700000405311584, 0.12800000607967377, 0.1289999932050705, 0.12999999523162842, 0.13099999725818634, 0.13199999928474426, 0.1340000033378601, 0.13500000536441803, 0.13600000739097595, 0.13699999451637268, 0.13899999856948853, 0.14000000059604645, 0.14100000262260437, 0.1420000046491623, 0.14399999380111694, 0.1459999978542328, 0.14800000190734863, 0.15000000596046448, 0.15199999511241913, 0.15399999916553497, 0.15600000321865082, 0.15800000727176666, 0.1599999964237213, 0.16200000047683716, 0.164000004529953, 0.16699999570846558, 0.16899999976158142, 0.17100000381469727, 0.17399999499320984, 0.17599999904632568, 0.17800000309944153, 0.18000000715255737, 0.18199999630451202, 0.18400000035762787, 0.18700000643730164, 0.1889999955892563, 0.19099999964237213, 0.1940000057220459, 0.19599999487400055, 0.19599999487400055, 0.19300000369548798, 0.1899999976158142, 0.18799999356269836, 0.1860000044107437, 0.18299999833106995, 0.1809999942779541, 0.17900000512599945, 0.17800000309944153, 0.1770000010728836, 0.17499999701976776, 0.17299999296665192, 0.1720000058412552, 0.17000000178813934, 0.16899999976158142, 0.16699999570846558, 0.16599999368190765, 0.16500000655651093, 0.16500000655651093, 0.164000004529953, 0.16300000250339508, 0.16200000047683716, 0.16099999845027924, 0.1599999964237213, 0.1589999943971634, 0.1589999943971634, 0.1589999943971634, 0.15800000727176666, 0.15800000727176666, 0.15800000727176666, 0.15700000524520874, 0.15700000524520874, 0.15700000524520874, 0.15600000321865082, 0.15600000321865082, 0.15600000321865082, 0.15600000321865082, 0.15600000321865082, 0.15600000321865082, 0.15600000321865082, 0.15600000321865082, 0.15700000524520874, 0.15700000524520874, 0.15800000727176666, 0.15800000727176666, 0.15800000727176666, 0.15800000727176666, 0.1589999943971634, 0.1589999943971634, 0.1599999964237213, 0.1599999964237213, 0.16099999845027924, 0.16200000047683716, 0.16300000250339508, 0.164000004529953, 0.16500000655651093, 0.16599999368190765, 0.16699999570846558, 0.1679999977350235, 0.16899999976158142, 0.17100000381469727, 0.1720000058412552, 0.17299999296665192, 0.17399999499320984, 0.17499999701976776, 0.1770000010728836, 0.17900000512599945, 0.1809999942779541, 0.18299999833106995, 0.18400000035762787, 0.1860000044107437, 0.18799999356269836, 0.1899999976158142, 0.19200000166893005, 0.1940000057220459, 0.19699999690055847, 0.19900000095367432, 0.20200000703334808, 0.20499999821186066, 0.20900000631809235, 0.21199999749660492, 0.2150000035762787, 0.21699999272823334, 0.21699999272823334, 0.23000000417232513, 0.20900000631809235, 0.20900000631809235, 0.20499999821186066, 0.19699999690055847, 0.19200000166893005, 0.1899999976158142, 0.18799999356269836, 0.1850000023841858, 0.18199999630451202, 0.17900000512599945, 0.17599999904632568, 0.17399999499320984, 0.1720000058412552, 0.17000000178813934, 0.1679999977350235, 0.16599999368190765, 0.16300000250339508, 0.16099999845027924, 0.1589999943971634, 0.15800000727176666, 0.15700000524520874, 0.1550000011920929, 0.15399999916553497, 0.15299999713897705, 0.15199999511241913, 0.1509999930858612, 0.15000000596046448, 0.14900000393390656, 0.14800000190734863, 0.1469999998807907, 0.1459999978542328, 0.14499999582767487, 0.14499999582767487, 0.14399999380111694, 0.14300000667572021, 0.1420000046491623, 0.14100000262260437, 0.14000000059604645, 0.13899999856948853, 0.1379999965429306, 0.1379999965429306, 0.1379999965429306, 0.13899999856948853, 0.13899999856948853, 0.13899999856948853, 0.13899999856948853, 0.14000000059604645, 0.14000000059604645};
    
    PCA pca;
    pca.CalculateAndPlotPCA(laserScanRange);
    // std::cout << pca.getFilteredLeftScanData() << std::endl;
    // std::cout << pca.getFilteredRightScanData() << std::endl;
    std::cout << pca.getPCA_Left() << std::endl;
    std::cout << pca.getPCA_Right() << std::endl;

    return 0;
}
